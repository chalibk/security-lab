name: "Trivy Scan - Malicious Image Detection"

on:
  workflow_dispatch:
    inputs:
      image_name:
        description: "Container image to scan (e.g. myregistry/malicious:latest)"
        required: true
        default: "malicious:latest"

jobs:
  trivy-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write   # for uploading SARIF results

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh \
            | sudo sh -s -- -b /usr/local/bin

      - name: Scan malicious image for vulnerabilities
        id: trivy
        run: |
          mkdir -p trivy-results
          IMAGE="${{ github.event.inputs.image_name }}"
          echo "üîç Scanning image: $IMAGE"

          # Run Trivy scan
          trivy image \
            --format json \
            --vuln-type os,library \
            --severity CRITICAL,HIGH,MEDIUM,LOW \
            -o trivy-results/scan-results.json \
            "$IMAGE"

          # Generate SARIF format for GitHub Security tab
          trivy image \
            --format sarif \
            --output trivy-results/scan-results.sarif \
            "$IMAGE"

      - name: Show vulnerability summary
        run: |
          echo "Critical vulnerabilities:"
          jq '[.Results[].Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' trivy-results/scan-results.json
          echo "High vulnerabilities:"
          jq '[.Results[].Vulnerabilities[]? | select(.Severity=="HIGH")] | length' trivy-results/scan-results.json

      - name: Fail if critical vulnerabilities found
        run: |
          CRITICAL=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' trivy-results/scan-results.json)
          if [ "$CRITICAL" -gt 0 ]; then
            echo "::error::Detected $CRITICAL critical vulnerabilities!"
            exit 1
          fi

      - name: Upload Trivy report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-results
          path: trivy-results/

      - name: Upload to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results/scan-results.sarif

